const { Socket } = require('net');
const {
    ConnectedError, NotConnectedError, ServerDownError,
} = require('./errors');

const DEFAULT_PORT = 6567;
const DEFAULT_SOCKET_PORT = 6859;

class Server {
    constructor(hostname, socketPort = DEFAULT_SOCKET_PORT) {
        this.hostname = hostname;
        this.socketPort = socketPort;
        this.connected = false;

        this.socket = new Socket();
    }

    connect(callback = () => {}) {
        if (this.connected) throw new ConnectedError();

        this.socket.once('error', () => {
            throw new ServerDownError(this);
        });

        this.socket.connect(this.socketPort, this.hostname, () => {
            this.connected = true;
            callback();
        });
    }

    disconnect(callback = () => {}) {
        if (!this.connected) throw new NotConnectedError();

        this.socket.destroy();
        this.connected = false;
        callback();
    }

    command(command, callback = () => {}) {
        if (!this.connected) {
            throw new NotConnectedError();
        }

        this.socket.once('data', (buffer) => {
            const data = buffer.toString();
            console.log(`data in module: ${data}`)
            callback(data);
        });

        this.socket.write(`${command}\n`);
    }

    ping(callback = () => {}) {
        const socket = new Socket();
        socket.once('error', () => {
            throw new ServerDownError(this);
        });

        const startTime = new Date();
        socket.connect(this.socketPort, this.hostname, () => {
            const connectTime = new Date();
            callback(connectTime.getMilliseconds() - startTime.getMilliseconds());

            socket.destroy();
        });
    }
}

module.exports = { Server, DEFAULT_PORT, DEFAULT_SOCKET_PORT };
